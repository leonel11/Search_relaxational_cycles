<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="calculation_8cpp" kind="file" language="C++">
    <compoundname>calculation.cpp</compoundname>
    <includes refid="calculation_8h" local="yes">calculation.h</includes>
    <incdepgraph>
      <node id="41">
        <label>iomanip</label>
      </node>
      <node id="37">
        <label>windows.h</label>
      </node>
      <node id="27">
        <label>calculation.cpp</label>
        <link refid="calculation.cpp"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>stdlib.h</label>
      </node>
      <node id="32">
        <label>arithmetic.h</label>
        <link refid="arithmetic_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>string</label>
      </node>
      <node id="28">
        <label>calculation.h</label>
        <link refid="calculation_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>operations.h</label>
        <link refid="operations_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>omp.h</label>
      </node>
      <node id="30">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>string.h</label>
      </node>
      <node id="44">
        <label>vector</label>
      </node>
      <node id="29">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>program.h</label>
        <link refid="program_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sstream</label>
      </node>
      <node id="38">
        <label>time.h</label>
      </node>
      <node id="36">
        <label>math.h</label>
      </node>
      <node id="40">
        <label>iostream</label>
      </node>
      <node id="45">
        <label>algorithm</label>
      </node>
      <node id="33">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="calculation_8h" kindref="compound">calculation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"><ref refid="class_relaxarion_oscillations_1ade0e59e1059cde99b18be8878736638c" kindref="member">RelaxarionOscillations::RelaxarionOscillations</ref>(<ref refid="class_data_parser" kindref="compound">DataParser</ref><sp/>config,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*start_point<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>config.<ref refid="class_data_parser_1aabdef48a661a4737ec01d3d31e00ccb3" kindref="member">Dim</ref>();</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>config.<ref refid="class_data_parser_1af0cc37893ec5aa4aa05130cea1988d53" kindref="member">D</ref>();</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>config.<ref refid="class_data_parser_1a12892b6cc8bb7b24159e7709852649cd" kindref="member">Alpha</ref>();</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>config.<ref refid="class_data_parser_1a31d430da03dca13e7cec8f84401c12a6" kindref="member">Beta</ref>();</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>config.<ref refid="class_data_parser_1ab82aae2922755c17eafa460578ff587b" kindref="member">Eps</ref>();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>config.<ref refid="class_data_parser_1a124b97cf683480bcb705256af645e446" kindref="member">H</ref>();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_point_operations_1af856a7ce25a39cb868725f8e25f65296" kindref="member">PointOperations::InitPoint</ref>(sln,<sp/>start_point);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>ZeroizeBoundaryConditions();</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RelaxarionOscillations::ZeroizeBoundaryConditions()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_point_operations_1a97def43827da6fe4ad1004015f62f7fb" kindref="member">PointOperations::ZeroizePoint</ref>(bound_cond_plus_zero);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_point_operations_1a97def43827da6fe4ad1004015f62f7fb" kindref="member">PointOperations::ZeroizePoint</ref>(bound_cond_alpha_plus_zero);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_relaxarion_oscillations_1afb7f1fd0b0d02ca54ae0f9b63e43fb9a" kindref="member">RelaxarionOscillations::SetSolution</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*solution<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_point_operations_1a4f5463040b9da28ceeaa6a773dbf03da" kindref="member">PointOperations::SetPoint</ref>(sln,<sp/>solution);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="class_relaxarion_oscillations_1ab5e64b9ca53763b51f541ae620134748" kindref="member">RelaxarionOscillations::GetSolution</ref>()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sln;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>RelaxarionOscillations::Period()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha<sp/>+<sp/>1.0<sp/>+<sp/>(beta+1.0)/(alpha-beta-1.0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RelaxarionOscillations::MakeImpetusToSolution(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-h<sp/>&lt;=<sp/>0.0<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>0.0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>+0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bound_cond_plus_zero[j]<sp/>=<sp/>(alpha-1)/(alpha-beta-1)*sln[j];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sln[j]<sp/>=<sp/>bound_cond_plus_zero[j];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-h<sp/>&lt;=<sp/>1.0<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>1.0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>1+0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sln[j]<sp/>=<sp/>sln[j]<sp/>-<sp/>alpha/(alpha-1)*bound_cond_plus_zero[j];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-h<sp/>&lt;=<sp/>alpha<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>alpha)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>alpha+0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bound_cond_alpha_plus_zero[j]<sp/>=<sp/>(1+beta)*sln[j];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sln[j]<sp/>=<sp/>bound_cond_alpha_plus_zero[j];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-h<sp/>&lt;=<sp/>alpha+1<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>alpha+1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>alpha+1+0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sln[j]<sp/>=<sp/>sln[j]<sp/>-<sp/>alpha/(beta+1)*bound_cond_alpha_plus_zero[j];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RelaxarionOscillations::RungeKuttaMethod()<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k1<sp/>=<sp/>0.0,<sp/>k2<sp/>=<sp/>0.0,<sp/>k3<sp/>=<sp/>0.0,<sp/>k4<sp/>=<sp/>0.0;<sp/></highlight><highlight class="comment">//<sp/>вспомогательные<sp/>слагаемые<sp/>для<sp/>метода<sp/>Рунге-Кутты</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>h*d*(exp(sln[j+1])+exp(-sln[j])-exp(sln[j])-exp(-sln[j-1]));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>h*d*(exp(sln[j+1]+h*k1/2)+exp(-sln[j]+h*k1/2)-exp(sln[j]+h*k1/2)-exp(-sln[j-1]+h*k1/2));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k3<sp/>=<sp/>h*d*(exp(sln[j+1]+h*k2/2)+exp(-sln[j]+h*k2/2)-exp(sln[j]+h*k2/2)-exp(-sln[j-1]+h*k2/2));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k4<sp/>=<sp/>h*d*(exp(sln[j+1]+h*k3)+exp(-sln[j]+h*k3)-exp(sln[j]+h*k3)-exp(-sln[j-1]+h*k3));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sln[j]<sp/>=<sp/>sln[j]<sp/>+<sp/>(1.0/6)*(k1+2*k2+2*k3+k4);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RelaxarionOscillations::IsPassedSwitchPoint(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>точки<sp/>переключения:<sp/>0,<sp/>1,<sp/>alpha,<sp/>alpha+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t-h<sp/>&lt;=<sp/>0.0<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>0.0)<sp/>||<sp/>(t-h<sp/>&lt;=<sp/>1.0<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>1.0)<sp/>||<sp/>(t-h<sp/>&lt;=<sp/>alpha<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>alpha)<sp/>||<sp/>(t-h<sp/>&lt;=<sp/>alpha+1<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>alpha+1))<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_relaxarion_oscillations_1ad5c4c127a5c314536a095ab983471422" kindref="member">RelaxarionOscillations::CalculateSolution</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T0<sp/>=<sp/>Period();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>-h/2;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(T0<sp/>-<sp/>t<sp/>&gt;<sp/>0.0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>итерационный<sp/>расчёт</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>h;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>-<sp/>T0)<sp/>&gt;=<sp/>0.0)<sp/></highlight><highlight class="comment">//<sp/>ограничение,<sp/>чтобы<sp/>при<sp/>расчёте<sp/>не<sp/>выйти<sp/>за<sp/>пределы<sp/>рассматриваемого<sp/>периода</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>T0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsPassedSwitchPoint(t))</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeImpetusToSolution(t);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RungeKuttaMethod();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="class_relaxarion_oscillations_1ae7de123edaf002b2741bc2739eb167f3" kindref="member">RelaxarionOscillations::~RelaxarionOscillations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_Glyzin/Search cycles for maps/RelaxationOscillations/calculation.cpp"/>
  </compounddef>
</doxygen>
